AWSTemplateFormatVersion: '2010-09-09'
Description: When a file is saved to bucket A, a lambda function moves a copy of the file to bucket B, ideally through an API, and saving a record of the results of the lambda function

Parameters:
  EnvType:
    Description: Environment type.
    Default: dev
    Type: String
    AllowedValues: [prod, dev, demo]
    ConstraintDescription: must specify prod, dev, or demo.

Resources:
  #Roles
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
      Policies:
      - PolicyName: tag
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: ['dynamodb:PutItem']
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Table}'
  
  ########################## [ Bucket A Resources ] ##########################
  #DynamoDB Table for Logging
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 's3-bucket-trigger-api-log-table-${EnvType}'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      KeySchema:
      - AttributeName: RequestId
        KeyType: HASH
      AttributeDefinitions:
      -  AttributeName: RequestId
         AttributeType: S

  #Lambda Function
  BucketACatchAllFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          from uuid import uuid4

          dynamodb = boto3.resource('dynamodb')

          def image_handler(event, context):
              for record in event['Records']:
                  bucket_name = record['s3']['bucket']['name']
                  object_key = record['s3']['object']['key']
                  size = record['s3']['object'].get('size', -1)
                  event_name = record['eventName']
                  event_time = record['eventTime']
                  dynamodb.Table('${Table}').put_item(
                      Item={'RequestId': str(uuid4()), 'Bucket': bucket_name, 'Object': object_key,
                            'Size': size, 'Event': event_name, 'EventTime': event_time})
              ''' Demonstrates a simple HTTP request from Lambda '''
              response = requests.get('https://jsonplaceholder.typicode.com/posts')
              posts = json.loads(response.text) #load data into a dict of objects, posts
              logger.debug('posts is a = {}'.format(type(posts)))
              # Let's get the unique userId, there should only be 1-10
              unique_ids = set()
              for post in posts:
                  unique_ids.add(post['userId'])
              logger.debug('unique_ids = {}'.format(unique_ids))
              return True
      FunctionName: !Sub 'BucketACatchAllFn-${EnvType}'
      Handler: index.image_handler
      Runtime: python3.6
      Role: !Sub '${Role.Arn}'
      Timeout: 60
      ReservedConcurrentExecutions: 10

  #Lambda Function Permission
  InvokePermissionA:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BucketACatchAllFn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::s3-bucket-trigger-api-bucket-a-${AWS::AccountId}-${EnvType}'

  #Bucket A
  DemoBucketa:
    Type: AWS::S3::Bucket
    DependsOn: InvokePermissionA
    Properties:
      BucketName: !Sub 's3-bucket-trigger-api-bucket-a-${AWS::AccountId}-${EnvType}'
      NotificationConfiguration:
        LambdaConfigurations:
        -  Event: 's3:ObjectCreated:*'
           Function: !Sub '${BucketACatchAllFn.Arn}'
        -  Event: 's3:ObjectRemoved:*'
           Function: !Sub '${BucketACatchAllFn.Arn}'
        -  Event: 's3:ReducedRedundancyLostObject'
           Function: !Sub '${BucketACatchAllFn.Arn}'

  ########################## [ Bucket B Resources ] ##########################
  #Lambda Function
  BucketBCatchAllFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          from uuid import uuid4

          dynamodb = boto3.resource('dynamodb')

          def image_handler(event, context):
              for record in event['Records']:
                  bucket_name = record['s3']['bucket']['name']
                  object_key = record['s3']['object']['key']
                  size = record['s3']['object'].get('size', -1)
                  event_name = record['eventName']
                  event_time = record['eventTime']
                  dynamodb.Table('${Table}').put_item(
                      Item={'RequestId': str(uuid4()), 'Bucket': bucket_name, 'Object': object_key,
                            'Size': size, 'Event': event_name, 'EventTime': event_time})
              return True
      FunctionName: !Sub 'BucketBCatchAllFn-${EnvType}'
      Handler: index.image_handler
      Runtime: python3.6
      Role: !Sub '${Role.Arn}'
      Timeout: 60
      ReservedConcurrentExecutions: 10

  #Lambda Function Permission
  InvokePermissionB:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BucketBCatchAllFn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::s3-bucket-trigger-api-bucket-b-${AWS::AccountId}-${EnvType}'

  #Bucket B
  DemoBucketb:
    Type: AWS::S3::Bucket
    DependsOn: InvokePermissionB
    Properties:
      BucketName: !Sub 's3-bucket-trigger-api-bucket-b-${AWS::AccountId}-${EnvType}'
      NotificationConfiguration:
        LambdaConfigurations:
        -  Event: 's3:ObjectCreated:*'
           Function: !Sub '${BucketBCatchAllFn.Arn}'
        -  Event: 's3:ObjectRemoved:*'
           Function: !Sub '${BucketBCatchAllFn.Arn}'
        -  Event: 's3:ReducedRedundancyLostObject'
           Function: !Sub '${BucketBCatchAllFn.Arn}'
